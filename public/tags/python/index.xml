<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Alex' Blog</title><link>http://localhost:1313/tags/python/</link><description>Recent content in Python on Alex' Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 29 Sep 2024 20:49:33 +0200</lastBuildDate><atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Using one bpython with multiple virtual environments</title><link>http://localhost:1313/posts/bpython-with-multiple-virtual-environments/</link><pubDate>Sun, 29 Sep 2024 20:49:33 +0200</pubDate><guid>http://localhost:1313/posts/bpython-with-multiple-virtual-environments/</guid><description>&lt;p>I finally realized that I should change the default Python REPL. There are many REPLs that offer a much better experience—&lt;a href="https://ipython.org/">ipython&lt;/a>, &lt;a href="https://bpython-interpreter.org/">bpython&lt;/a>, and &lt;a href="https://github.com/prompt-toolkit/ptpython">ptpython&lt;/a> are probably the most well-known. In the past, I used ipython because I worked on many projects that involved Jupyter notebooks, so it came essentially for free whenever I installed the necessary packages.&lt;/p>
&lt;p>However, in recent years, I&amp;rsquo;ve been working on a lot of projects that don&amp;rsquo;t rely on Jupyter, meaning ipython wasn’t installed by default. This meant I always had to manually install it in any virtual environment where I wanted to use it—which I didn’t like, as I prefer to keep only project-specific dependencies in a virtual environment.&lt;/p></description></item><item><title>Run Jupyter Notebooks as a Service on macOS</title><link>http://localhost:1313/posts/run-jupyter-notebooks-as-a-service-on-macos/</link><pubDate>Thu, 31 Aug 2017 04:16:40 +0000</pubDate><guid>http://localhost:1313/posts/run-jupyter-notebooks-as-a-service-on-macos/</guid><description>&lt;p>I was looking for a way to run &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->jupyer notebook&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> without using a constantly open terminal or a screen session. On macOS there is a way to create services using a .plist file and the &lt;a href="http://www.launchd.info">launchctl&lt;/a> command.&lt;/p>
&lt;p>Because I use different environments for all Python related stuff, it wasn’t immediately clear to me how to do this when I’ve installed Jupyter only in a &lt;a href="https://github.com/pyenv/pyenv">pyenv&lt;/a>. After some fiddling around, I finally solved it. The key was to set the working directory parameter to the directory in which the environment is loaded. In my case this is &lt;code>~/notebooks&lt;/code> where I &lt;a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-local">automatically load the env by using a &lt;code>.python-version&lt;/code> file&lt;/a>.&lt;/p></description></item><item><title>Show Download and Upload speed on your LaMetric Time</title><link>http://localhost:1313/posts/show-download-and-upload-speed-on-your-lametric-time/</link><pubDate>Mon, 06 Feb 2017 13:13:57 +0000</pubDate><guid>http://localhost:1313/posts/show-download-and-upload-speed-on-your-lametric-time/</guid><description>&lt;p>Following a request at the LaMetric forum I wrote a small Python script for displaying your current download and upload speed on a LaMetric Time. The script can run on your own laptop or server (preferred).&lt;/p>
&lt;p>Basically you need to do two things:&lt;/p>
&lt;ul>
&lt;li>Create an app for the LaMetric Time&lt;/li>
&lt;li>run the script that performs the speed test and push the results to the device&lt;/li>
&lt;/ul>
&lt;h4 id="1-create-an-indicator-app">1. Create an indicator app&lt;/h4>
&lt;p>This is quite an easy thing to do. You need an account for the &lt;!-- raw HTML omitted -->LaMetric developer area&lt;!-- raw HTML omitted --> (it’s free, so don’t worry). In the developer area you can create a new app – in this case select indicator application.&lt;/p></description></item><item><title>LaMetric Firmware 1.7.5</title><link>http://localhost:1313/posts/lametric-firmware-1-7-5/</link><pubDate>Tue, 31 Jan 2017 22:37:29 +0000</pubDate><guid>http://localhost:1313/posts/lametric-firmware-1-7-5/</guid><description>&lt;p>A new firmware for the LaMetric Time is out – &lt;a href="http://firmware.lametric.com">version 1.7.5&lt;/a> has some nice things to offer for those of us who would like to use the device in home automation (sadly the documentation is not yet updated). While this has been announced in the change log for 1.7.4, there have been some bugs and there are still one or two things that needs fixing, but that’s just minor stuff.&lt;/p></description></item></channel></rss>